#include "hydrolib_fixed_point.hpp"
#include "hydrolib_iir.hpp"

#include <gtest/gtest.h>

TEST(TestFilter, IIRTest)
{
    hydrolib::filter::IIR<double, 1.0, 100.0> filter;
    for (int i = 0; i < 10000; i++)
    {
        double x_true = sin(i * 2 * 3.14 / 10000);
        double x_noized = x_true + sin(i * 2 * 3.14 / 10);
        double result = filter.Process(x_noized);
        // std::cout << x_noized << " " << result << " " << x_true << std::endl;
        EXPECT_NEAR(result, x_true, 0.1);
    }
}

// TEST(TestFilter, IIRTestRealData)
// {
//     hydrolib::math::FixedPointBase data[] = {
//         0.111, 0.108, 0.107, 0.113, 0.107,  0.104,  0.102,  0.101,  0.102,
//         0.104, 0.107, 0.108, 0.109, 0.111,  0.109,  0.107,  0.106,  0.108,
//         0.107, 0.107, 0.119, 0.125, 0.109,  0.101,  0.1,    0.101,  0.103,
//         0.105, 0.106, 0.108, 0.11,  0.11,   0.111,  0.11,   0.109,  0.108,
//         0.107, 0.109, 0.109, 0.11,  0.11,   0.109,  0.109,  0.109,  0.109,
//         0.109, 0.11,  0.109, 0.109, 0.109,  0.109,  0.109,  0.109,  0.109,
//         0.109, 0.109, 0.109, 0.109, 0.109,  0.109,  0.109,  0.109,  0.109,
//         0.109, 0.109, 0.109, 0.109, 0.114,  0.114,  0.118,  0.115,  0.111,
//         0.116, 0.112, 0.114, 0.114, 0.115,  0.117,  0.122,  0.12,   0.116,
//         0.111, 0.114, 0.122, 0.14,  0.146,  0.134,  0.13,   0.141,  0.15,
//         0.143, 0.13,  0.127, 0.131, 0.138,  0.14,   0.153,  0.149,  0.133,
//         0.116, 0.107, 0.112, 0.116, 0.124,  0.142,  0.162,  0.164,  0.152,
//         0.151, 0.135, 0.93,  0.69,  0.91,   0.122,  0.153,  0.174,  0.185,
//         0.196, 0.195, 0.192, 0.192, 0.191,  0.176,  0.144,  0.138,  0.139,
//         0.148, 0.151, 0.151, 0.158, 0.165,  0.178,  0.197,  0.208,  0.224,
//         0.218, 0.211, 0.199, 0.172, 0.134,  0.103,  0.83,   0.88,   0.115,
//         0.157, 0.209, 0.232, 0.25,  0.255,  0.237,  0.182,  0.169,  0.192,
//         0.234, 0.277, 0.318, 0.326, 0.355,  0.369,  0.372,  0.368,  0.349,
//         0.312, 0.25,  0.201, 0.164, 0.163,  0.2,    0.243,  0.299,  0.349,
//         0.371, 0.279, 0.14,  -0.19, -0.152, -0.243, -0.281, -0.171, 0.17,
//         0.162, 0.235, 0.257, 0.283, 0.325,  0.371,  0.389,  0.36,   0.411,
//         0.559, 0.775, 0.855, 0.706, 0.515,  0.412,  0.435,  0.437,  0.437,
//         0.424, 0.424, 0.442, 0.47,  0.496,  0.513,  0.529,  0.53,   0.495,
//         0.461, 0.459, 0.487, 0.581, 0.646,  0.719,  0.752,  0.766,  0.749,
//         0.676, 0.545, 0.495, 0.58,  0.689,  0.866,  0.923,  0.923,  0.914,
//         0.866, 0.737, 0.571, 0.547, 0.577,  0.649,  0.722,  0.813,  0.836,
//         0.828, 0.807, 0.788, 0.758, 0.741,  0.731,  0.76,   0.84,   0.923,
//         1.25,  1.32,  0.951, 0.843, 0.75,   0.708,  0.73,   0.738,  0.707,
//         0.689, 0.722, 0.815, 0.859, 0.915,  0.96,   0.962,  0.869,  0.791,
//         0.731, 0.7,   0.697, 0.749, 0.895,  0.991,  1.29,   0.995,  0.941,
//         0.85,  0.76,  0.691, 0.667, 0.706,  0.847,  0.971,  1.61,   1.36,
//         0.947, 0.858, 0.775, 0.734, 0.725,  0.744,  0.795,  0.914,  0.963,
//         0.954, 0.88,  0.789, 0.734, 0.895,  0.947,  0.979,  1.12,   1.21,
//         0.938, 0.908, 0.899, 0.883, 0.857,  0.812,  0.791,  0.768,  0.763,
//         0.776, 0.79,  0.795, 0.787, 0.78,   0.753,  0.714,  0.764,  0.841,
//         0.89,  0.903, 0.888, 0.857, 0.84,   0.846,  0.865,  0.886,  0.884,
//         0.843, 0.826, 0.765, 0.721, 0.692,  0.672,  0.656,  0.671,  0.713,
//         0.764, 0.805, 0.838, 0.84,  0.819,  0.777,  0.715,  0.612,  0.578,
//         0.575, 0.593, 0.621, 0.647, 0.642,  0.621,  0.599,  0.578,  0.562,
//         0.554, 0.543, 0.525, 0.499, 0.479,  0.465,  0.433,  0.413,  0.389,
//         0.358, 0.318, 0.263, 0.247, 0.26,   0.287,  0.315,  0.328,  0.302,
//         0.264, 0.205, 0.144, 0.98,  0.76,   0.71,   0.66,   0.67,   0.51,
//         0.24,  0.15,  0.16,  0.21,  0.67,   0.114,  0.154,  0.152,  0.122,
//         0.81,  0.33,  -0.1,  -0.42, -0.41,  -0.19,  0.5,    0.22,   0.35,
//         0.36,  0.28,  0.12,  -0.3,  -0.1,   0.2,    0.18,   0.31,   0.41,
//         0.42,  0.34,  0.29,  0.25,  0.22,   0.21,   0.21,   0.21,   0.28,
//         0.38,  0.45,  0.44,  0.31,  0.22,   0.15,   0.1,    0.12,   0.17,
//         0.23,  0.25,  0.26,  0.23,  0.2,    0.19,   0.26,   0.32,   0.35,
//         0.35,  0.35,  0.36,  0.31,  0.25,   0.21,   0.26,   0.41,   0.42,
//         0.36,  0.3,   0.23,  0.18,  0.19,   0.26,   0.36,   0.41,   0.34,
//         0.7,   -0.18, -0.35, -0.36, -0.2,   0.1,    0.74,   0.103,  0.118,
//         0.117, 0.103, 0.8,   0.7,   0.67,   0.68,   0.69,   0.67,   0.58,
//         0.53,  0.52,  0.53,  0.53,  0.51,   0.52,   0.56,   0.62,   0.68,
//         0.65,  0.57,  0.48,  0.42,  0.39,   0.39,   0.46,   0.53,   0.57,
//         0.61,  0.64,  0.66,  0.63,  0.58,   0.53,   0.52,   0.51,   0.49,
//         0.47,  0.48,  0.51,  0.54,  0.5,    0.46,   0.4,    0.37,   0.42,
//         0.53,  0.64,  0.64,  0.61,  0.54,   0.49,   0.53,   0.56,   0.58,
//         0.58,  0.55,  0.48,  0.39,  0.35,   0.35,   0.41,   0.5,    0.63,
//         0.82,  0.107, 0.131, 0.157, 0.19,   0.228,  0.222,  0.212,  0.189,
//         0.163, 0.141, 0.134, 0.133, 0.137,  0.139,  0.137,  0.133,  0.131,
//         0.13,  0.131, 0.131, 0.14,  0.151,  0.162,  0.156,  0.169,  0.189,
//         0.21,  0.229, 0.246, 0.26,  0.271,  0.304,  0.336,  0.368,  0.389,
//         0.416, 0.447, 0.496, 0.523, 0.545,  0.572,  0.606,  0.653,  0.672,
//         0.685, 0.699, 0.702, 0.683, 0.644,  0.639,  0.663,  0.715,  0.778,
//         0.837, 0.849, 0.838, 0.811, 0.803,  0.831,  0.906,  0.947,  0.97,
//         0.986, 0.994, 0.967, 0.937, 0.924,  0.922,  0.925,  0.931,  0.937,
//         0.935, 0.943, 0.961, 0.978, 1.2,    1.9,    0.981,  0.916,  0.826,
//         0.77,  0.76,  0.775, 0.781, 0.789,  0.788,  0.757,  0.725,  0.706,
//         0.709, 0.72,  0.722, 0.727, 0.717,  0.674,  0.609,  0.549,  0.519,
//         0.519, 0.524, 0.527, 0.517, 0.498,  0.474,  0.431,  0.396,  0.377,
//         0.354, 0.352, 0.359, 0.376, 0.404,  0.438,  0.454,  0.427,  0.389,
//         0.351, 0.321, 0.303, 0.305, 0.317,  0.329,  0.336,  0.31,   0.266,
//         0.166, 0.183, 0.181, 0.161, 0.21,   0.295,  0.303,  0.249,  0.182,
//         0.139, 0.116, 0.83,  0.87,  0.99,   0.111,  0.138,  0.145,  0.118,
//         0.99,  0.72,  0.43,  0.36,  0.64,   0.104,  0.165,  0.223,  0.267,
//         0.242, 0.107, 0.65,  0.57,  0.48,   0.21,   0.51,   0.78,   0.157,
//         0.158, 0.2,   -0.67, -0.62, -0.36,  -0.7,   0.16,   0.34,   0.48,
//         0.52,  0.52,  0.51,  0.49,  0.47,   0.46,   0.45,   0.44,   0.44,
//         0.44,  0.44,  0.44,  0.44,  0.44,   0.44,   0.44,   0.44,   0.44,
//         0.44,  0.44,  0.43,  0.43,  0.43,   0.43,   0.43,   0.43,   0.43,
//         0.42,  0.42,  0.42,  0.42,  0.42,   0.42,   0.41,   0.41,   0.41,
//         0.41,  0.42,  0.42,  0.41,  0.41,   0.41,   0.41,   0.41,   0.41,
//         0.41,  0.41,  0.41,  0.41,  0.41,   0.41,   0.41,   0.41,   0.4,
//         0.4,   0.41,  0.41,  0.41,  0.41,   0.41,   0.41,   0.4,    0.4,
//         0.4,   0.4,   0.4,   0.4,   0.4,    0.4,    0.4,    0.4,    0.4,
//         0.4,   0.4,   0.4,   0.4,   0.4,    0.4,    0.41,   0.41,   0.41,
//         0.4,   0.4,   0.39,  0.39,  0.39,   0.39,   0.39,   0.39,   0.39,
//         0.39,  0.39,  0.39,  0.39,  0.39,   0.39,   0.39,   0.39,   0.4,
//         0.4,   0.39,  0.39,  0.39,  0.38,   0.39,   0.39,   0.4,    0.39,
//         0.39,  0.38,  0.38,  0.38,  0.39,   0.39,   0.39,   0.39,   0.39,
//         0.39,  0.39,  0.39,  0.39,  0.38,   0.38,   0.38,   0.37,   0.38,
//         0.38,  0.39,  0.39,  0.38,  0.38,   0.45,   0.46,   0.41,   0.33,
//         0.29,  0.28,  0.29,  0.3,   0.31,   0.32,   0.32,   0.33,   0.32,
//         0.32,  0.32,  0.32,  0.32,  0.32,   0.32,   0.32,   0.32,   0.32,
//         0.32,  0.32,  0.32,  0.32,  0.32,   0.32,   0.32,   0.32,   0.32,
//         0.32,  0.32,  0.31,  0.32,  0.32,   0.32,   0.32,   0.32,   0.32,
//         0.32,  0.32,  0.32,  0.32,  0.32,   0.32,   0.32,   0.31,   0.31,
//         0.31,  0.31,  0.31,  0.31,  0.31,   0.31,   0.32,   0.32,   0.32,
//         0.32,  0.32,  0.32,  0.31,  0.32,   0.32,   0.32,   0.31,   0.31,
//         0.31,  0.31,  0.31,  0.31,  0.31,   0.31,   0.31,   0.31,   0.32,
//         0.31,  0.31,  0.31,  0.31,  0.32,   0.32,   0.31,   0.31,   0.31,
//         0.31,  0.32,  0.31,  0.31,  0.31,   0.31,   0.31,   0.31,   0.31,
//         0.31,  0.31,  0.31,  0.31,  0.31,   0.31,   0.31,   0.3,    0.31,
//         0.31,  0.31,  0.31,  0.31,  0.31,   0.31,   0.31,   0.31,   0.31,
//         0.31,  0.31,  0.31,  0.31,  0.31,   0.31,   0.31,   0.31,   0.31,
//         0.31,  0.31,  0.31,  0.31,  0.31,   0.31,   0.31,   0.31,   0.31};
//     hydrolib::filter::IIR<hydrolib::math::FixedPointBase, 10.0, 200.0> filter;
//     for (hydrolib::math::FixedPointBase i:data)
//     {
//         hydrolib::math::FixedPointBase result = filter.Process(i);
//         std::cout << static_cast<double>(i) << " " << static_cast<double>(result) << " " << std::endl;
//     }
// }
